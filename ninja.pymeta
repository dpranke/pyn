grammar    = decls:ds end -> ds

decls      = (ws|'\n')* decl:d  decls:ds -> [d] + ds
           | (ws|'\n')* decl:d           -> [d]
           | (ws|'\n')*                  -> []

decl       = rule | build | var | default | subninja | import | pool

rule       = "rule" ws ident:n eol indented_var+:vs -> ['rule', n, vs]

build      = "build" ws paths:os ws? ":" ws ident:rule ws paths:ins deps:ds eol
           -> ['build', os, rule, ins, ds]

deps       = ws "|" ws paths:ps -> ps
           | -> []

var        = ident:n ws "=" spaces (~eol anything)+:v eol
           -> ['var', n, ''.join(v)]

default    = "default" ws paths:ps eol -> ['default', ps]

subninja   = "subninja" ws path:p    -> ['subninja', p]

import     = "include" ws path:p     -> ['import', p]

pool       = "pool" ws ident:name eol indented_var+:vars -> ['pool', name, vars]

indented_var = ws var:v              -> v

ident      = (letter|'_'|'$'|'.'):hd (letter|'.'|'_')*:tl -> ''.join([hd] + tl)

paths      = path:p ws paths:ps -> [p] + ps
           | path:p -> [p]

path       = '"' (~('"'|'\n') anything)+:p '"' -> ''.join(p)
           | (~(' '|':'|'='|'|'|eol) anything)+:p  -> ''.join(p)

eol        = '#' (~'\n' anything)* '\n'
           | ' '* ~('$' '\n') '\n'

ws         = (' '|('$' '\n'))+
