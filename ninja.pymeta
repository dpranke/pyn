grammar  = ((ws|'\n')* decl)+:ds (ws|'\n')* end        -> ds

decl     = build | rule | var | subninja | include
         | pool | default

build    = "build" ws paths:os ws? ':' ws name:rule 
           ws paths:ins deps:ds eol (ws var)*:vs       -> ['build', os, rule,
                                                           ins, ds, vs]

rule     = "rule" ws name:n eol (ws var)*:vs           -> ['rule', n, vs]

var      = name:n ws? '=' ws? value:v eol              -> ['var', n, v]

value    = (~eol (('$' '\n' ' '+ -> '')|anything))*:vs -> ''.join(vs)

subninja = "subninja" ws path:p                        -> ['subninja', p]

include  = "include" ws path:p                         -> ['include', p]

pool     = "pool" ws name:n eol (ws var)*:vars         -> ['pool', n, vars]

default  = "default" ws paths:ps eol                   -> ['default', ps]

paths    = path:hd (ws path)*:tl                       -> [hd] + tl

path     = (~(' '|':'|'='|'|'|eol) anything)+:p        -> ''.join(p)

name     = (letter|'_')*:ls                            -> ''.join(ls)

deps     = ws? '|' ws? paths:ps                        -> ps
         |                                             -> []

eol      = '#' (~'\n' anything)* '\n'
         | ' '* ~('$' '\n') '\n'

ws       = (' '|('$' '\n'))+
