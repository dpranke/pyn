grammar    = (ws|'\n')* decls:ds (ws|'\n')* end -> ds

decls      = decl:d (ws|'\n')* decls:ds -> [d] + ds
           | decl:d                     -> [d]

decl       = build | rule | var | subninja | include | pool | default

build      = "build" ws paths:os ws? ":" ws ident:rule ws paths:ins deps:ds eol
             indented_var*:vs -> ['build', os, rule, ins, ds, vs]

rule       = "rule" ws ident:n eol indented_var+:vs -> ['rule', n, vs]

var        = ident:n ws? "=" (~eol (('$' '\n' ' '+ -> '')|anything))*:v eol
           -> ['var', n, ''.join(v)]

subninja   = "subninja" ws path:p    -> ['subninja', p]

include    = "include" ws path:p     -> ['include', p]

pool       = "pool" ws ident:name eol indented_var+:vars -> ['pool', name, vars]

default    = "default" ws paths:ps eol -> ['default', ps]

paths      = path:p ws paths:ps -> [p] + ps
           | path:p -> [p]

path       = (~('"'|' '|':'|'='|'|'|eol) anything)+:p  -> ''.join(p)
           | '"' (~('"'|'\n') anything)+:p '"'         -> ''.join(p)

ident      = (letter|'_'|'$'|'.'):hd (letter|'.'|'_')*:tl -> ''.join([hd] + tl)

deps       = ws "|" ws paths:ps -> ps
           | -> []

eol        = '#' (~'\n' anything)* '\n'
           | ' '* ~('$' '\n') '\n'

ws         = (' '|('$' '\n'))+

indented_var = ws var:v -> v


