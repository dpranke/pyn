rule pycov
  command = COVERAGE_FILE=.coverage.$out coverage run $in
  description = generating python coverage for $in

rule shell
  command = $shell_cmd
  description = $shell_desc

build python_coverage : shell $
    .coverage.analyzer_test.py $
    .coverage.builder_test.py $
    .coverage.main_test.py $
    .coverage.ninja_parser_test.py $
    .coverage.common_test.py
  shell_cmd = coverage combine $in && coverage --report --omit 'pymeta/*,/pymeta_generate*'
  shell_desc = combining python coverage data

rule pycomp 
  command = python pycomp.py -MMD -MF .$out.d $in
  depfile = .$out.d
  description = checking $in

rule pylint 
  command = $
    pylint --rcfile pylintrc $in > $out.tmp; $
    if [ -s $out.tmp ]; $
    then $
        cat $out.tmp 1>&2 ; $
        rm -f $out.tmp; $
        false ; $
    else $
        rm -f $out.tmp ; $
    fi
  description = pylint $in

rule pytest
  command = $
    python $in 2> $out.tmp; $
    if grep FAILED $out.tmp; $
    then $
      cat $out.tmp 1>&2 ; $
      rm $out.tmp; $
      false; $
    fi
  description = python $in


build all : phony compile_python

build compile_python : phony $
  builder.pyc $
  builder_test.pyc $
  analyzer.pyc $
  analyzer_test.pyc $
  common.pyc $
  common_test.pyc $
  host.pyc $
  main.pyc $
  main_test.pyc $
  ninja_parser.pyc $
  ninja_parser_test.pyc $

build lint : phony $
  .pylint.analyzer.py $
  .pylint.analyzer_test.py $
  .pylint.builder.py $
  .pylint.builder_test.py $
  .pylint.common.py $
  .pylint.common_test.py $
  .pylint.host.py $
  .pylint.main.py $
  .pylint.main_test.py $
  .pylint.ninja_parser_test.py

build test : phony $
  .pytest.analyzer_test.py $
  .pytest.builder_test.py $
  .pytest.common_test.py $
  .pytest.main_test.py $
  .pytest.ninja_parser_test.py

build coverage : phony .pycoverage_report

build pycoverage_report : pycov analyzer_test.py $
                                builder_test.py $
                                common_test.py $
                                main_test.py $
                                ninja_parser_test.py

build .pylint.analyzer.py : pylint analyzer.py
build .pylint.analyzer_test.py : pylint analyzer_test.py
build .pylint.builder.py : pylint builder.py
build .pylint.builder_test.py : pylint builder_test.py
build .pylint.common.py : pylint common.py
build .pylint.common_test.py : pylint common_test.py
build .pylint.host.py : pylint host.py
build .pylint.main.py : pylint main.py
build .pylint.main_test.py : pylint main_test.py
build .pylint.ninja_parser_test.py : pylint ninja_parser_test.py

build .pytest.analyzer_test.py : pytest analyzer_test.py
build .pytest.builder_test.py : pytest builder_test.py
build .pytest.common_test.py : pytest common_test.py
build .pytest.main_test.py : pytest main_test.py
build .pytest.ninja_parser_test.py : pytest ninja_parser_test.py

build analyzer.pyc : pycomp analyzer.py
build analyzer_test.pyc : pycomp analyzer_test.py
build builder.pyc : pycomp builder.py
build builder_test.pyc : pycomp builder_test.py
build common.pyc : pycomp common.py
build common_test.pyc : pycomp common_test.py
build main.pyc : pycomp main.py
build main_test.pyc : pycomp main_test.py
build host.pyc : pycomp host.py
build ninja_parser.pyc : pycomp ninja_parser.py
build ninja_parser_test.pyc : pycomp ninja_parser_test.py


default all
